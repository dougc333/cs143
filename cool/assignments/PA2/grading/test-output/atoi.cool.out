#name "./atoi.cool"
#1 '('
#1 ERROR "*"
#2 TYPEID The
#2 CLASS
#2 TYPEID A
#2 INT_CONST 2
#2 TYPEID I
#2 OBJECTID provides
#2 OBJECTID integer
#2 '-'
#2 OBJECTID to
#2 '-'
#2 OBJECTID string
#2 OBJECTID and
#2 OBJECTID string
#2 '-'
#2 OBJECTID to
#2 '-'
#2 OBJECTID integer
#3 OBJECTID conversion
#3 OBJECTID routines
#3 '.'
#3 TYPEID To
#3 OBJECTID use
#3 OBJECTID these
#3 OBJECTID routines
#3 ERROR ","
#3 OBJECTID either
#3 OBJECTID inherit
#3 OBJECTID them
#4 IN
#4 OBJECTID the
#4 CLASS
#4 OBJECTID where
#4 OBJECTID needed
#4 ERROR ","
#4 OBJECTID have
#4 OBJECTID a
#4 OBJECTID dummy
#4 OBJECTID variable
#4 OBJECTID bound
#4 OBJECTID to
#5 OBJECTID something
#5 OF
#5 OBJECTID type
#5 TYPEID A
#5 INT_CONST 2
#5 TYPEID I
#5 ERROR ","
#5 OBJECTID or
#5 OBJECTID simpl
#5 OBJECTID write
#5 '('
#5 NEW
#5 TYPEID A
#5 INT_CONST 2
#5 TYPEID I
#5 ')'
#5 '.'
#5 OBJECTID method
#5 '('
#5 OBJECTID argument
#5 ')'
#5 '.'
#6 ERROR "*"
#6 ')'
#9 '('
#9 ERROR "*"
#10 OBJECTID c
#10 INT_CONST 2
#10 OBJECTID i
#10 TYPEID Converts
#10 OBJECTID a
#10 INT_CONST 1
#10 '-'
#10 OBJECTID character
#10 OBJECTID string
#10 OBJECTID to
#10 OBJECTID an
#10 OBJECTID integer
#10 '.'
#10 TYPEID Aborts
#11 IF
#11 OBJECTID the
#11 OBJECTID string
#11 OBJECTID is
#11 OBJECTID not
#11 STR_CONST "0"
#11 OBJECTID through
#11 STR_CONST "9"
#12 ERROR "*"
#12 ')'
#13 CLASS
#13 TYPEID A
#13 INT_CONST 2
#13 TYPEID I
#13 '{'
#15 OBJECTID c
#15 INT_CONST 2
#15 OBJECTID i
#15 '('
#15 OBJECTID char
#15 ':'
#15 TYPEID String
#15 ')'
#15 ':'
#15 TYPEID Int
#15 '{'
#16 IF
#16 OBJECTID char
#16 ERROR "="
#16 STR_CONST "0"
#16 THEN
#16 INT_CONST 0
#16 ELSE
#17 IF
#17 OBJECTID char
#17 ERROR "="
#17 STR_CONST "1"
#17 THEN
#17 INT_CONST 1
#17 ELSE
#18 IF
#18 OBJECTID char
#18 ERROR "="
#18 STR_CONST "2"
#18 THEN
#18 INT_CONST 2
#18 ELSE
#19 IF
#19 OBJECTID char
#19 ERROR "="
#19 STR_CONST "3"
#19 THEN
#19 INT_CONST 3
#19 ELSE
#20 IF
#20 OBJECTID char
#20 ERROR "="
#20 STR_CONST "4"
#20 THEN
#20 INT_CONST 4
#20 ELSE
#21 IF
#21 OBJECTID char
#21 ERROR "="
#21 STR_CONST "5"
#21 THEN
#21 INT_CONST 5
#21 ELSE
#22 IF
#22 OBJECTID char
#22 ERROR "="
#22 STR_CONST "6"
#22 THEN
#22 INT_CONST 6
#22 ELSE
#23 IF
#23 OBJECTID char
#23 ERROR "="
#23 STR_CONST "7"
#23 THEN
#23 INT_CONST 7
#23 ELSE
#24 IF
#24 OBJECTID char
#24 ERROR "="
#24 STR_CONST "8"
#24 THEN
#24 INT_CONST 8
#24 ELSE
#25 IF
#25 OBJECTID char
#25 ERROR "="
#25 STR_CONST "9"
#25 THEN
#25 INT_CONST 9
#25 ELSE
#26 '{'
#26 OBJECTID abort
#26 '('
#26 ')'
#26 ';'
#26 INT_CONST 0
#26 ';'
#26 '}'
matching comment -- the 0 is needed to satisfy the typchecker
#27 FI
#27 FI
#27 FI
#27 FI
#27 FI
#27 FI
#27 FI
#27 FI
#27 FI
#27 FI
#28 '}'
#28 ';'
#30 '('
#30 ERROR "*"
#31 OBJECTID i
#31 INT_CONST 2
#31 OBJECTID c
#31 OBJECTID is
#31 OBJECTID the
#31 OBJECTID inverse
#31 OF
#31 OBJECTID c
#31 INT_CONST 2
#31 OBJECTID i
#31 '.'
#32 ERROR "*"
#32 ')'
#33 OBJECTID i
#33 INT_CONST 2
#33 OBJECTID c
#33 '('
#33 OBJECTID i
#33 ':'
#33 TYPEID Int
#33 ')'
#33 ':'
#33 TYPEID String
#33 '{'
#34 IF
#34 OBJECTID i
#34 ERROR "="
#34 INT_CONST 0
#34 THEN
#34 STR_CONST "0"
#34 ELSE
#35 IF
#35 OBJECTID i
#35 ERROR "="
#35 INT_CONST 1
#35 THEN
#35 STR_CONST "1"
#35 ELSE
#36 IF
#36 OBJECTID i
#36 ERROR "="
#36 INT_CONST 2
#36 THEN
#36 STR_CONST "2"
#36 ELSE
#37 IF
#37 OBJECTID i
#37 ERROR "="
#37 INT_CONST 3
#37 THEN
#37 STR_CONST "3"
#37 ELSE
#38 IF
#38 OBJECTID i
#38 ERROR "="
#38 INT_CONST 4
#38 THEN
#38 STR_CONST "4"
#38 ELSE
#39 IF
#39 OBJECTID i
#39 ERROR "="
#39 INT_CONST 5
#39 THEN
#39 STR_CONST "5"
#39 ELSE
#40 IF
#40 OBJECTID i
#40 ERROR "="
#40 INT_CONST 6
#40 THEN
#40 STR_CONST "6"
#40 ELSE
#41 IF
#41 OBJECTID i
#41 ERROR "="
#41 INT_CONST 7
#41 THEN
#41 STR_CONST "7"
#41 ELSE
#42 IF
#42 OBJECTID i
#42 ERROR "="
#42 INT_CONST 8
#42 THEN
#42 STR_CONST "8"
#42 ELSE
#43 IF
#43 OBJECTID i
#43 ERROR "="
#43 INT_CONST 9
#43 THEN
#43 STR_CONST "9"
#43 ELSE
#44 '{'
#44 OBJECTID abort
#44 '('
#44 ')'
#44 ';'
#44 STR_CONST ""
#44 ';'
#44 '}'
matching comment -- the "" is needed to satisfy the typchecker
#45 FI
#45 FI
#45 FI
#45 FI
#45 FI
#45 FI
#45 FI
#45 FI
#45 FI
#45 FI
#46 '}'
#46 ';'
#48 '('
#48 ERROR "*"
#49 OBJECTID a
#49 INT_CONST 2
#49 OBJECTID i
#49 OBJECTID converts
#49 OBJECTID an
#49 TYPEID ASCII
#49 OBJECTID string
#49 OBJECTID into
#49 OBJECTID an
#49 OBJECTID integer
#49 '.'
#49 TYPEID The
#49 OBJECTID empty
#49 OBJECTID string
#50 OBJECTID is
#50 OBJECTID converted
#50 OBJECTID to
#50 INT_CONST 0
#50 '.'
#50 TYPEID Signed
#50 OBJECTID and
#50 OBJECTID unsigned
#50 OBJECTID strings
#50 OBJECTID are
#50 OBJECTID handled
#50 '.'
#50 TYPEID The
#51 OBJECTID method
#51 OBJECTID aborts
#51 IF
#51 OBJECTID the
#51 OBJECTID string
#51 OBJECTID does
#51 OBJECTID not
#51 OBJECTID represent
#51 OBJECTID an
#51 OBJECTID integer
#51 '.'
#51 TYPEID Very
#52 OBJECTID long
#52 OBJECTID strings
#52 OF
#52 OBJECTID digits
#52 OBJECTID produce
#52 OBJECTID strange
#52 OBJECTID answers
#52 OBJECTID because
#52 OF
#52 OBJECTID arithmetic
#53 OBJECTID overflow
#53 '.'
#55 ERROR "*"
#55 ')'
#56 OBJECTID a
#56 INT_CONST 2
#56 OBJECTID i
#56 '('
#56 OBJECTID s
#56 ':'
#56 TYPEID String
#56 ')'
#56 ':'
#56 TYPEID Int
#56 '{'
#57 IF
#57 OBJECTID s
#57 '.'
#57 OBJECTID length
#57 '('
#57 ')'
#57 ERROR "="
#57 INT_CONST 0
#57 THEN
#57 INT_CONST 0
#57 ELSE
#58 IF
#58 OBJECTID s
#58 '.'
#58 OBJECTID substr
#58 '('
#58 INT_CONST 0
#58 ERROR ","
#58 INT_CONST 1
#58 ')'
#58 ERROR "="
#58 STR_CONST "-"
#58 THEN
#58 ERROR "~"
#58 OBJECTID a
#58 INT_CONST 2
#58 OBJECTID i_aux
#58 '('
#58 OBJECTID s
#58 '.'
#58 OBJECTID substr
#58 '('
#58 INT_CONST 1
#58 ERROR ","
#58 OBJECTID s
#58 '.'
#58 OBJECTID length
#58 '('
#58 ')'
#58 '-'
#58 INT_CONST 1
#58 ')'
#58 ')'
#58 ELSE
#59 IF
#59 OBJECTID s
#59 '.'
#59 OBJECTID substr
#59 '('
#59 INT_CONST 0
#59 ERROR ","
#59 INT_CONST 1
#59 ')'
#59 ERROR "="
#59 STR_CONST "+"
#59 THEN
#59 OBJECTID a
#59 INT_CONST 2
#59 OBJECTID i_aux
#59 '('
#59 OBJECTID s
#59 '.'
#59 OBJECTID substr
#59 '('
#59 INT_CONST 1
#59 ERROR ","
#59 OBJECTID s
#59 '.'
#59 OBJECTID length
#59 '('
#59 ')'
#59 '-'
#59 INT_CONST 1
#59 ')'
#59 ')'
#59 ELSE
#60 OBJECTID a
#60 INT_CONST 2
#60 OBJECTID i_aux
#60 '('
#60 OBJECTID s
#60 ')'
#61 FI
#61 FI
#61 FI
#62 '}'
#62 ';'
#64 '('
#64 ERROR "*"
#65 OBJECTID a
#65 INT_CONST 2
#65 OBJECTID i_aux
#65 OBJECTID converts
#65 OBJECTID the
#65 OBJECTID usigned
#65 OBJECTID portion
#65 OF
#65 OBJECTID the
#65 OBJECTID string
#65 '.'
#65 TYPEID As
#65 OBJECTID a
#65 OBJECTID programming
#66 OBJECTID example
#66 ERROR ","
#66 OBJECTID this
#66 OBJECTID method
#66 OBJECTID is
#66 OBJECTID written
#66 OBJECTID iteratively
#66 '.'
#67 ERROR "*"
#67 ')'
#68 OBJECTID a
#68 INT_CONST 2
#68 OBJECTID i_aux
#68 '('
#68 OBJECTID s
#68 ':'
#68 TYPEID String
#68 ')'
#68 ':'
#68 TYPEID Int
#68 '{'
#69 '('
#69 LET
#69 OBJECTID int
#69 ':'
#69 TYPEID Int
#69 ASSIGN
#69 INT_CONST 0
#69 IN
#70 '{'
#71 '('
#71 LET
#71 OBJECTID j
#71 ':'
#71 TYPEID Int
#71 ASSIGN
#71 OBJECTID s
#71 '.'
#71 OBJECTID length
#71 '('
#71 ')'
#71 IN
#72 '('
#72 LET
#72 OBJECTID i
#72 ':'
#72 TYPEID Int
#72 ASSIGN
#72 INT_CONST 0
#72 IN
#73 WHILE
#73 OBJECTID i
#73 ERROR "<"
#73 OBJECTID j
#73 LOOP
#74 '{'
#75 OBJECTID int
#75 ASSIGN
#75 OBJECTID int
#75 ERROR "*"
#75 INT_CONST 10
#75 '+'
#75 OBJECTID c
#75 INT_CONST 2
#75 OBJECTID i
#75 '('
#75 OBJECTID s
#75 '.'
#75 OBJECTID substr
#75 '('
#75 OBJECTID i
#75 ERROR ","
#75 INT_CONST 1
#75 ')'
#75 ')'
#75 ';'
#76 OBJECTID i
#76 ASSIGN
#76 OBJECTID i
#76 '+'
#76 INT_CONST 1
#76 ';'
#77 '}'
#78 POOL
#79 ')'
#80 ')'
#80 ';'
#81 OBJECTID int
#81 ';'
#82 '}'
#83 ')'
#84 '}'
#84 ';'
#86 '('
#86 ERROR "*"
#87 OBJECTID i
#87 INT_CONST 2
#87 OBJECTID a
#87 OBJECTID converts
#87 OBJECTID an
#87 OBJECTID integer
#87 OBJECTID to
#87 OBJECTID a
#87 OBJECTID string
#87 '.'
#87 TYPEID Positive
#87 OBJECTID and
#87 OBJECTID negative
#88 OBJECTID numbers
#88 OBJECTID are
#88 OBJECTID handled
#88 OBJECTID correctly
#88 '.'
#89 ERROR "*"
#89 ')'
#90 OBJECTID i
#90 INT_CONST 2
#90 OBJECTID a
#90 '('
#90 OBJECTID i
#90 ':'
#90 TYPEID Int
#90 ')'
#90 ':'
#90 TYPEID String
#90 '{'
#91 IF
#91 OBJECTID i
#91 ERROR "="
#91 INT_CONST 0
#91 THEN
#91 STR_CONST "0"
#91 ELSE
#92 IF
#92 INT_CONST 0
#92 ERROR "<"
#92 OBJECTID i
#92 THEN
#92 OBJECTID i
#92 INT_CONST 2
#92 OBJECTID a_aux
#92 '('
#92 OBJECTID i
#92 ')'
#92 ELSE
#93 STR_CONST "-"
#93 '.'
#93 OBJECTID concat
#93 '('
#93 OBJECTID i
#93 INT_CONST 2
#93 OBJECTID a_aux
#93 '('
#93 OBJECTID i
#93 ERROR "*"
#93 ERROR "~"
#93 INT_CONST 1
#93 ')'
#93 ')'
#94 FI
#94 FI
#95 '}'
#95 ';'
#97 '('
#97 ERROR "*"
#98 OBJECTID i
#98 INT_CONST 2
#98 OBJECTID a_aux
#98 OBJECTID is
#98 OBJECTID an
#98 OBJECTID example
#98 OBJECTID using
#98 OBJECTID recursion
#98 '.'
#99 ERROR "*"
#99 ')'
#100 OBJECTID i
#100 INT_CONST 2
#100 OBJECTID a_aux
#100 '('
#100 OBJECTID i
#100 ':'
#100 TYPEID Int
#100 ')'
#100 ':'
#100 TYPEID String
#100 '{'
#101 IF
#101 OBJECTID i
#101 ERROR "="
#101 INT_CONST 0
#101 THEN
#101 STR_CONST ""
#101 ELSE
#102 '('
#102 LET
#102 OBJECTID next
#102 ':'
#102 TYPEID Int
#102 ASSIGN
#102 OBJECTID i
#102 ERROR "/"
#102 INT_CONST 10
#102 IN
#103 OBJECTID i
#103 INT_CONST 2
#103 OBJECTID a_aux
#103 '('
#103 OBJECTID next
#103 ')'
#103 '.'
#103 OBJECTID concat
#103 '('
#103 OBJECTID i
#103 INT_CONST 2
#103 OBJECTID c
#103 '('
#103 OBJECTID i
#103 '-'
#103 OBJECTID next
#103 ERROR "*"
#103 INT_CONST 10
#103 ')'
#103 ')'
#104 ')'
#105 FI
#106 '}'
#106 ';'
#108 '}'
#108 ';'
